'use strict';var math={};var random={};import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,
__init__,__ior__,__ipow__,__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__proxy__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,
divmod,enumerate,filter,float,getattr,hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import{KDTree}from"./gridder.kdtrees._kdtree.js";import*as __module_random__ from"./random.js";__nest__(random,"",__module_random__);import*as __module_math__ from"./math.js";__nest__(math,"",__module_math__);var __name__=
"gridder.grid_util";export var GPU_DIM=8;export var coord_to_key=function(c){return 1E3*round(c[0]+1E3*(c[1]+c[2]*1E3))};export var mol_gridify=function(grid,atom_coords,atom_layers,layer_offset,num_layers_to_consider,width,res,center,rot){var r2=3.0625;var half_width=width/2;var data=function(){var __accu0__=[];for(var [i,c]of enumerate(atom_coords))__accu0__.append([c.x,c.y,c.z]);return __accu0__}();var tree=KDTree.initialize(data,3,0,null);var layers=dict({});for(var [i,c]of enumerate(data))layers[coord_to_key(c)]=
atom_layers[i];for(var rotation_idx=0;rotation_idx<len(grid);rotation_idx++)for(var layer_idx=0;layer_idx<len(grid[rotation_idx]);layer_idx++){if(layer_idx<layer_offset)continue;if(layer_idx>=layer_offset+num_layers_to_consider)continue;print(rotation_idx,layer_idx);for(var x=0;x<len(grid[rotation_idx][layer_idx]);x++)for(var y=0;y<len(grid[rotation_idx][layer_idx][x]);y++)for(var z=0;z<len(grid[rotation_idx][layer_idx][y]);z++){var tx=x-half_width;var ty=y-half_width;var tz=z-half_width;var tx=tx*
res;var ty=ty*res;var tz=tz*res;var aw=rot[0];var ax=rot[1];var ay=rot[2];var az=rot[3];var bx=tx;var by=ty;var bz=tz;var cw=-(ax*bx)-ay*by-az*bz;var cx=aw*bx+ay*bz-az*by;var cy=aw*by+az*bx-ax*bz;var cz=aw*bz+ax*by-ay*bx;var dx=cw*-ax+cx*aw+cy*-az-cz*-ay;var dy=cw*-ay+cy*aw+cz*-ax-cx*-az;var dz=cw*-az+cz*aw+cx*-ay-cy*-ax;var tx=dx+center.x;var ty=dy+center.y;var tz=dz+center.z;var pt=[tx,ty,tz];var closest_atom_coords=tree.nearest_neighbor(pt,1,[]);if(closest_atom_coords[0][1]>r2)continue;var closest_atom_coords=
tree.proximal_neighbor(pt,r2,[]);for(var atom_inf of closest_atom_coords){var ft=layers[coord_to_key(atom_inf[0])];if(ft==-1)continue;var d2=atom_inf[1];var v=math.exp(-2*d2/r2);grid[rotation_idx][layer_offset+ft][x][y][z]+=v}}}return grid};export var flatten_tensor=function(grid,shape){var flat=[];for(var i1=0;i1<shape[0];i1++)for(var i2=0;i2<shape[1];i2++)for(var i3=0;i3<shape[2];i3++)for(var i4=0;i4<shape[3];i4++)for(var i5=0;i5<shape[4];i5++)flat.append(grid[i1][i2][i3][i4][i5]);return flat};
export var make_tensor=function(shape){var t=[];for(var i1=0;i1<shape[0];i1++){var t1=[];for(var i2=0;i2<shape[1];i2++){var t2=[];for(var i3=0;i3<shape[2];i3++){var t3=[];for(var i4=0;i4<shape[3];i4++){var t4=[];for(var i5=0;i5<shape[4];i5++)t4.append(0);t3.append(t4)}t2.append(t3)}t1.append(t2)}t.append(t1)}return t};export var rand_rot=function(){var q=[1,0,0,0];return q};export var get_raw_batch=function(r_coords,r_types,p_coords,p_types,conn,num_samples,width,res){var num_samples=num_samples===
null?1:num_samples;var width=width===null?24:width;var res=res===null?.5:res;var parent_channels=4;var rec_channels=5;var B=num_samples;var T=rec_channels+parent_channels;var N=width;var shape=tuple([B,T,N,N,N]);var grid=make_tensor(shape);var rot=rand_rot();var grid=mol_gridify(grid,p_coords,p_types,0,parent_channels,width,res,conn,rot);var grid=mol_gridify(grid,r_coords,r_types,parent_channels,rec_channels,width,res,conn,rot);return flatten_tensor(grid,shape)};

//# sourceMappingURL=gridder.grid_util.map