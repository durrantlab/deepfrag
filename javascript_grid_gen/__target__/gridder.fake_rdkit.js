'use strict';var re={};import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,
__ipow__,__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__proxy__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,
filter,float,getattr,hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import*as __module_re__ from"./re.js";__nest__(re,"",__module_re__);var __name__="gridder.fake_rdkit";export var element_names_with_two_letters=["BR","CL","BI","AS","AG","LI","MG","RH","ZN","MN"];export var element_to_atomic_num=dict({"H":1,
"HE":2,"LI":3,"BE":4,"B":5,"C":6,"N":7,"O":8,"F":9,"NE":10,"NA":11,"MG":12,"AL":13,"SI":14,"P":15,"S":16,"CL":17,"AR":18,"K":19,"CA":20});export var Point=__class__("Point",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,coor){self.x=coor[0];self.y=coor[1];self.z=coor[2]})},get __getitem__(){return __get__(this,function(self,key){if(key==0)return self.x;if(key==1)return self.y;if(key==2)return self.z;return 0})}});export var Atom=__class__("Atom",[object],{__module__:__name__,
get __init__(){return __get__(this,function(self,coor,py_name,element,resname){self.coor=Point(coor);self.py_name=py_name;self.element=element;self.resname=resname})},get GetAtomicNum(){return __get__(this,function(self){var elem=__in__(self.element,element_to_atomic_num)?element_to_atomic_num[self.element]:100;return elem})}});export var Mol=__class__("Mol",[object],{__module__:__name__,get __init__(){return __get__(this,function(self){self.atoms=[]})},get add_atom(){return __get__(this,function(self,
coor,py_name,element,resname){self.atoms.append(Atom(coor,py_name,element,resname))})},get GetAtomWithIdx(){return __get__(this,function(self,i){return self.atoms[i]})},get GetNumAtoms(){return __get__(this,function(self){return len(self.atoms)})},get GetConformer(){return __get__(this,function(self){return self})},get GetAtomPosition(){return __get__(this,function(self,i){return self.atoms[i].coor})}});export var MolIterator=__class__("MolIterator",[object],{__module__:__name__,get __init__(){return __get__(this,
function(self,mol){self.mols=[mol]})},get __iter__(){return __get__(this,function(self){return self})},[Symbol.iterator](){return this.__iter__()},get __next__(){return __get__(this,function(self){if(len(self.mols)==0){var __except0__=StopIteration;__except0__.__cause__=null;throw __except0__;}return self.mols.py_pop()})},next:__jsUsePyNext__});export var Chem=__class__("Chem",[object],{__module__:__name__,get MolFromPDBFile(){return function(filetxt,sanitize){var mol=Mol();var lines_src=filetxt.py_split("\n");
var lines=function(){var __accu0__=[];for(var l of lines_src)if(l.startswith("ATOM")||l.startswith("HETATM"))__accu0__.append(l);return __accu0__}();var coors=function(){var __accu0__=[];for(var l of lines)__accu0__.append([float(l.__getslice__(30,38,1)),float(l.__getslice__(38,46,1)),float(l.__getslice__(46,54,1))]);return __accu0__}();var names=function(){var __accu0__=[];for(var l of lines)__accu0__.append(l.__getslice__(11,16,1).strip());return __accu0__}();var elements_prep=function(){var __accu0__=
[];for(var n of names)__accu0__.append(n.upper().strip());return __accu0__}();for(var [i,e]of enumerate(elements_prep)){for(var num of"0123456789")var e=e.py_replace(num,"");elements_prep[i]=e}var elements_prep=function(){var __accu0__=[];for(var e of elements_prep)__accu0__.append(e.__getslice__(0,2,1));return __accu0__}();var elements=[];for(var e of elements_prep)elements.append(Chem.name_to_element(e));var resnames=function(){var __accu0__=[];for(var l of lines)__accu0__.append(l.__getslice__(16,
21,1).strip());return __accu0__}();for(var i=0;i<len(coors);i++)mol.add_atom(coors[i],names[i],elements[i],resnames[i]);return mol}},get name_to_element(){return function(py_name){if(__in__(py_name,element_names_with_two_letters))return py_name;else return py_name.__getslice__(0,1,1)}},get SDMolSupplier(){return function(filetxt,sanitize){if(typeof sanitize=="undefined"||sanitize!=null&&sanitize.hasOwnProperty("__kwargtrans__"))var sanitize=false;var mol=Mol();var txt=filetxt;var atoms=re.findall("^ *?[\\-0-9]+?\\.[\\-0-9]+? *?[\\-0-9]+?\\.[\\-0-9]+? *?[\\-0-9]+?\\.[\\-0-9]+? *?[a-zA-Z]+? *?[\\-0-9]+? *?[\\-0-9]+? *?[\\-0-9]+? *?[\\-0-9]+? *?[\\-0-9]+? *?[\\-0-9]+? *?$",
txt,re.MULTILINE);var atoms=function(){var __accu0__=[];for(var a of atoms)__accu0__.append(a.strip().py_split().__getslice__(0,4,1));return __accu0__}();for(var [x,y,z,py_name]of atoms)mol.add_atom([float(x),float(y),float(z)],py_name,Chem.name_to_element(py_name),"");var py_iter=MolIterator(mol);return py_iter}}});

//# sourceMappingURL=gridder.fake_rdkit.map